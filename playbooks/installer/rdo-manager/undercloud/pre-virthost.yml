---
- name: Ensure with can use the root user
  hosts: host0
  sudo: yes
  tasks:
    - name: allow auth with authorized_keys from the root user
      replace:
        dest=/root/.ssh/authorized_keys
        regexp='^no-port-forwarding.*(ssh-rsa .*)$'
        replace='\1'
      ignore_errors: yes
- name: Create the stack user on the virthost
  hosts: virthost
  vars:
    - ansible_ssh_user: root
  tasks:
    - name: create user
      user: name="{{ provisioner.remote_user }}" state=present password=stack

    - name: copy the .bash_profile file
      command:  cp /root/.bash_profile /home/{{ provisioner.remote_user }}/

    - name: set file permissions on .bash_profile
      file: path=/home/{{ provisioner.remote_user }}/.bash_profile mode=0755 owner={{ provisioner.remote_user }} group={{ provisioner.remote_user }}

    - name: create .ssh dir
      file: path=/home/{{ provisioner.remote_user }}/.ssh mode=0700 owner={{ provisioner.remote_user }} group=stack state=directory

    - name: copy the authorized_keys file
      command:  cp /root/.ssh/authorized_keys /home/{{ provisioner.remote_user }}/.ssh/

    - name: set file permissions on authorized_hosts
      file: path=/home/{{ provisioner.remote_user }}/.ssh/authorized_keys mode=0600 owner={{ provisioner.remote_user }} group={{ provisioner.remote_user }}

    - name: add user to sudoers
      lineinfile: dest=/etc/sudoers line="{{ provisioner.remote_user }} ALL=(root) NOPASSWD:ALL"

    - name: set fact for the stack user home
      set_fact: instack_user_home=/home/{{ provisioner.remote_user }}

    - name: Ensure ansible won't use the image cloud user
      add_host:
        name="host0"
        ansible_ssh_user="{{ provisioner.remote_user }}"

- include: repo-{{ product.name }}.yml repo_host=virthost

- name: Copy the gating package
  hosts: virthost
  tasks:
    - name: copy downstream rpm package
      copy: src={{ item }} dest=/home/{{ ansible_ssh_user }}/
      with_fileglob:
       - "{{ lookup('env', 'PWD') }}/generated_rpms/*.rpm"
      when: gating_repo is defined

- name: setup the virt host
  hosts: virthost
  tasks:
    - name: install the generated rpm
      shell: "yum install -y /home/{{ ansible_ssh_user }}/{{gating_repo}}*.rpm"
      sudo: yes
      when: gating_repo is defined

    - name: setup environment vars
      template: src={{ base_dir }}/khaleesi/playbooks/installer/rdo-manager/templates/virt-setup-env.j2 dest=~/virt-setup-env mode=0755

    - name: Contents of virt-setup-env
      shell: >
        cat {{ instack_user_home }}/virt-setup-env

- name: build/import undercloud vm
  hosts: virthost
  roles:
    - { role: images/undercloud/build, when: "installer.undercloud_image is not defined or installer.undercloud_image in ['build','save']"}
    - { role: images/undercloud/import, when: "installer.undercloud_image is defined and installer.undercloud_image == 'import'"}

- name: setup the virt host
  hosts: localhost
  tasks:
    - name: set_fact for undercloud ip
      set_fact: undercloud_ip={{ hostvars['host0'].undercloud_ip }}

    - name: debug undercloud_ip
      debug: var=hostvars['localhost'].undercloud_ip

- name: setup the virt host
  hosts: virthost
  tasks:
    - name: wait until ssh is available on undercloud node
      wait_for: host={{ hostvars['localhost'].undercloud_ip }}
            state=started
            port=22
            delay=15
            timeout=300

    - name: add undercloud host
      add_host:
        name=undercloud
        groups=undercloud
        ansible_ssh_host=undercloud
        ansible_fqdn=undercloud
        ansible_ssh_user="{{ provisioner.remote_user }}"
        ansible_ssh_private_key_file="{{ provisioner.key_file }}"
        gating_repo="{{ gating_repo is defined and gating_repo }}"

    - name: setup ssh config
      template: src={{ base_dir }}/khaleesi/playbooks/installer/rdo-manager/templates/ssh_config.j2 dest=~/ssh.config.ansible mode=0755

    - name: copy ssh_config back to the slave
      fetch: src=~/ssh.config.ansible dest="{{ base_dir }}/khaleesi/ssh.config.ansible" flat=yes

    - name: copy id_rsa key back to the slave
      fetch: src=~/.ssh/id_rsa dest="{{ base_dir }}/khaleesi/id_rsa_virt_host" flat=yes

    - name: copy undercloud root user authorized_keys to stack user
      shell: 'ssh -F ssh.config.ansible undercloud-from-virthost "cp /root/.ssh/authorized_keys /home/stack/.ssh/"'

    - name: chown authorized_keys for stack user
      shell: 'ssh -F ssh.config.ansible undercloud-from-virthost "chown stack:stack /home/stack/.ssh/authorized_keys"'

    - name: copy gating_repo package
      shell: >
        scp -F ssh.config.ansible /home/{{ ansible_ssh_user }}/{{ gating_repo }}*.rpm undercloud-from-virthost:{{ instack_user_home }}/
      when: gating_repo is defined

- name: regenerate the inventory file after adding hosts
  hosts: localhost
  tasks:
    - name: create inventory from template
      template:
        dest: "{{ lookup('env', 'PWD') }}/{{ tmp.node_prefix }}hosts"
        src: "{{ base_dir }}/khaleesi/playbooks/provisioner/templates/inventory.j2"

    - name: symlink inventory to a static name
      file:
        dest: "{{ lookup('env', 'PWD') }}/hosts"
        state: link
        src: "{{ lookup('env', 'PWD') }}/{{ tmp.node_prefix }}hosts"

- name: copy the guest image to the undercloud
  hosts: virthost
  tasks:
    - name: upload the guest-image on the undercloud
      command: scp -F ssh.config.ansible {{instack_user_home}}/{{ distro.images[distro.name][distro.full_version].guest_image_name }} undercloud-from-virthost:{{ instack_user_home }}/
      when: installer.overcloud_images == 'build'

- name: test host connection
  hosts: all:!localhost
  tasks:
    - name: test ssh
      command: hostname

    - name: check distro
      command: cat /etc/redhat-release

    - name: set fact stack user home
      set_fact: instack_user_home=/home/{{ provisioner.remote_user }}

- include: repo-{{ product.name }}.yml repo_host=undercloud

- name: Group all hosts in gate if we are gating
  hosts: all
  tasks:
    - group_by: key=gate-install-rpm
      when: gating_repo is defined

- name: Install the custom rpm when gating
  hosts: undercloud:&gate-install-rpm
  sudo: yes
  tasks:
    - name: install the gating_repo rpm we previously built
      shell: yum -y install /home/stack/{{ gating_repo }}*.rpm
